@inproceedings{10.1145/3315568.3329966,
 abstract = {Different Java compilers and compiler versions, e.g., javac or ecj, produce different bytecode from the same source code. This makes it hard to trace if the bytecode of an open-source library really matches the provided source code. Moreover, it prevents one from detecting which open-source libraries have been re-compiled and rebundled into a single jar, which is a common way to distribute an application. Such rebundling is problematic because it prevents one to check if the jar file contains open-source libraries with known vulnerabilities. To cope with these problems, we propose the tool SootDiff that uses Soot's intermediate representation Jimple, in combination with code clone detection techniques, to reduce dissimilarities introduced by different compilers, and to identify clones. Our results show that SootDiff successfully identifies clones in 102 of 144 cases, whereas bytecode comparison succeeds in 58 cases only.},
 address = {New York, NY, USA},
 author = {Dann, Andreas and Hermann, Ben and Bodden, Eric},
 booktitle = {Proceedings of the 8th ACM SIGPLAN International Workshop on State Of the Art in Program Analysis},
 doi = {10.1145/3315568.3329966},
 isbn = {9781450367202},
 keywords = {Intermediate Representation, Code Clone Detection, Static Analysis},
 location = {Phoenix, AZ, USA},
 numpages = {6},
 pages = {14â€“19},
 publisher = {Association for Computing Machinery},
 series = {SOAP 2019},
 title = {SootDiff: Bytecode Comparison across Different Java Compilers},
 url = {https://doi.org/10.1145/3315568.3329966},
 year = {2019}
}

